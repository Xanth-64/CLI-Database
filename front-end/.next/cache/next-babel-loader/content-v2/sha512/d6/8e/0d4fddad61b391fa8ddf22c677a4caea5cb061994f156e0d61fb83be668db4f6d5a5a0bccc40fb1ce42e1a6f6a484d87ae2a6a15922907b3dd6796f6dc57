{"ast":null,"code":"import _toConsumableArray from \"C:/Users/Alman/Documents/collegeProyects/DBCLI/CLI-Database/front-end/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\n\nvar _s = $RefreshSig$();\n\nimport { useMemo } from 'react';\nimport { ApolloClient, HttpLink, InMemoryCache } from '@apollo/client';\nimport { concatPagination } from '@apollo/client/utilities';\nimport merge from 'deepmerge';\nimport isEqual from 'lodash/isEqual';\nexport var APOLLO_STATE_PROP_NAME = '__APOLLO_STATE__';\nvar apolloClient;\n\nfunction createApolloClient() {\n  return new ApolloClient({\n    ssrMode: false,\n    link: new HttpLink({\n      uri: 'http://localhost:4000/graphql',\n      // Server URL (must be absolute)\n      credentials: 'same-origin' // Additional fetch() options like `credentials` or `headers`\n\n    }),\n    cache: new InMemoryCache({\n      typePolicies: {\n        Query: {\n          fields: {\n            allPosts: concatPagination()\n          }\n        }\n      }\n    })\n  });\n}\n\nexport function initializeApollo() {\n  var _apolloClient2;\n\n  var initialState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\n  var _apolloClient = (_apolloClient2 = apolloClient) !== null && _apolloClient2 !== void 0 ? _apolloClient2 : createApolloClient(); // If your page has Next.js data fetching methods that use Apollo Client, the initial state\n  // gets hydrated here\n\n\n  if (initialState) {\n    // Get existing cache, loaded during client side data fetching\n    var existingCache = _apolloClient.extract(); // Merge the existing cache into data passed from getStaticProps/getServerSideProps\n\n\n    var data = merge(initialState, existingCache, {\n      // combine arrays using object equality (like in sets)\n      arrayMerge: function arrayMerge(destinationArray, sourceArray) {\n        return [].concat(_toConsumableArray(sourceArray), _toConsumableArray(destinationArray.filter(function (d) {\n          return sourceArray.every(function (s) {\n            return !isEqual(d, s);\n          });\n        })));\n      }\n    }); // Restore the cache with the merged data\n\n    _apolloClient.cache.restore(data);\n  } // For SSG and SSR always create a new Apollo Client\n\n\n  if (false) return _apolloClient; // Create the Apollo Client once in the client\n\n  if (!apolloClient) apolloClient = _apolloClient;\n  return _apolloClient;\n}\nexport function addApolloState(client, pageProps) {\n  if (pageProps !== null && pageProps !== void 0 && pageProps.props) {\n    pageProps.props[APOLLO_STATE_PROP_NAME] = client.cache.extract();\n  }\n\n  return pageProps;\n}\nexport function useApollo(pageProps) {\n  _s();\n\n  var state = pageProps[APOLLO_STATE_PROP_NAME];\n  var store = useMemo(function () {\n    return initializeApollo(state);\n  }, [state]);\n  return store;\n}\n\n_s(useApollo, \"K8ucUnUnAgJZGJWAL9Ze8IHCmoQ=\");","map":{"version":3,"sources":["C:/Users/Alman/Documents/collegeProyects/DBCLI/CLI-Database/front-end/lib/apolloClient.js"],"names":["useMemo","ApolloClient","HttpLink","InMemoryCache","concatPagination","merge","isEqual","APOLLO_STATE_PROP_NAME","apolloClient","createApolloClient","ssrMode","link","uri","credentials","cache","typePolicies","Query","fields","allPosts","initializeApollo","initialState","_apolloClient","existingCache","extract","data","arrayMerge","destinationArray","sourceArray","filter","d","every","s","restore","addApolloState","client","pageProps","props","useApollo","state","store"],"mappings":";;;;AAAA,SAASA,OAAT,QAAwB,OAAxB;AACA,SAASC,YAAT,EAAuBC,QAAvB,EAAiCC,aAAjC,QAAsD,gBAAtD;AACA,SAASC,gBAAT,QAAiC,0BAAjC;AACA,OAAOC,KAAP,MAAkB,WAAlB;AACA,OAAOC,OAAP,MAAoB,gBAApB;AAEA,OAAO,IAAMC,sBAAsB,GAAG,kBAA/B;AAEP,IAAIC,YAAJ;;AAEA,SAASC,kBAAT,GAA8B;AAC1B,SAAO,IAAIR,YAAJ,CAAiB;AACpBS,IAAAA,OAAO,OADa;AAEpBC,IAAAA,IAAI,EAAE,IAAIT,QAAJ,CAAa;AACfU,MAAAA,GAAG,EAAE,+BADU;AACuB;AACtCC,MAAAA,WAAW,EAAE,aAFE,CAEa;;AAFb,KAAb,CAFc;AAMpBC,IAAAA,KAAK,EAAE,IAAIX,aAAJ,CAAkB;AACrBY,MAAAA,YAAY,EAAE;AACVC,QAAAA,KAAK,EAAE;AACHC,UAAAA,MAAM,EAAE;AACJC,YAAAA,QAAQ,EAAEd,gBAAgB;AADtB;AADL;AADG;AADO,KAAlB;AANa,GAAjB,CAAP;AAgBH;;AAED,OAAO,SAASe,gBAAT,GAA+C;AAAA;;AAAA,MAArBC,YAAqB,uEAAN,IAAM;;AAClD,MAAMC,aAAa,qBAAGb,YAAH,2DAAmBC,kBAAkB,EAAxD,CADkD,CAGlD;AACA;;;AACA,MAAIW,YAAJ,EAAkB;AACd;AACA,QAAME,aAAa,GAAGD,aAAa,CAACE,OAAd,EAAtB,CAFc,CAId;;;AACA,QAAMC,IAAI,GAAGnB,KAAK,CAACe,YAAD,EAAeE,aAAf,EAA8B;AAC5C;AACAG,MAAAA,UAAU,EAAE,oBAACC,gBAAD,EAAmBC,WAAnB;AAAA,4CACLA,WADK,sBAELD,gBAAgB,CAACE,MAAjB,CAAwB,UAACC,CAAD;AAAA,iBACvBF,WAAW,CAACG,KAAZ,CAAkB,UAACC,CAAD;AAAA,mBAAO,CAACzB,OAAO,CAACuB,CAAD,EAAIE,CAAJ,CAAf;AAAA,WAAlB,CADuB;AAAA,SAAxB,CAFK;AAAA;AAFgC,KAA9B,CAAlB,CALc,CAed;;AACAV,IAAAA,aAAa,CAACP,KAAd,CAAoBkB,OAApB,CAA4BR,IAA5B;AACH,GAtBiD,CAuBlD;;;AACA,aAAmC,OAAOH,aAAP,CAxBe,CAyBlD;;AACA,MAAI,CAACb,YAAL,EAAmBA,YAAY,GAAGa,aAAf;AAEnB,SAAOA,aAAP;AACH;AAED,OAAO,SAASY,cAAT,CAAwBC,MAAxB,EAAgCC,SAAhC,EAA2C;AAC9C,MAAIA,SAAJ,aAAIA,SAAJ,eAAIA,SAAS,CAAEC,KAAf,EAAsB;AAClBD,IAAAA,SAAS,CAACC,KAAV,CAAgB7B,sBAAhB,IAA0C2B,MAAM,CAACpB,KAAP,CAAaS,OAAb,EAA1C;AACH;;AAED,SAAOY,SAAP;AACH;AAED,OAAO,SAASE,SAAT,CAAmBF,SAAnB,EAA8B;AAAA;;AACjC,MAAMG,KAAK,GAAGH,SAAS,CAAC5B,sBAAD,CAAvB;AACA,MAAMgC,KAAK,GAAGvC,OAAO,CAAC;AAAA,WAAMmB,gBAAgB,CAACmB,KAAD,CAAtB;AAAA,GAAD,EAAgC,CAACA,KAAD,CAAhC,CAArB;AACA,SAAOC,KAAP;AACH;;GAJeF,S","sourcesContent":["import { useMemo } from 'react'\r\nimport { ApolloClient, HttpLink, InMemoryCache } from '@apollo/client'\r\nimport { concatPagination } from '@apollo/client/utilities'\r\nimport merge from 'deepmerge'\r\nimport isEqual from 'lodash/isEqual'\r\n\r\nexport const APOLLO_STATE_PROP_NAME = '__APOLLO_STATE__'\r\n\r\nlet apolloClient\r\n\r\nfunction createApolloClient() {\r\n    return new ApolloClient({\r\n        ssrMode: typeof window === 'undefined',\r\n        link: new HttpLink({\r\n            uri: 'http://localhost:4000/graphql', // Server URL (must be absolute)\r\n            credentials: 'same-origin', // Additional fetch() options like `credentials` or `headers`\r\n        }),\r\n        cache: new InMemoryCache({\r\n            typePolicies: {\r\n                Query: {\r\n                    fields: {\r\n                        allPosts: concatPagination(),\r\n                    },\r\n                },\r\n            },\r\n        }),\r\n    })\r\n}\r\n\r\nexport function initializeApollo(initialState = null) {\r\n    const _apolloClient = apolloClient ?? createApolloClient()\r\n\r\n    // If your page has Next.js data fetching methods that use Apollo Client, the initial state\r\n    // gets hydrated here\r\n    if (initialState) {\r\n        // Get existing cache, loaded during client side data fetching\r\n        const existingCache = _apolloClient.extract()\r\n\r\n        // Merge the existing cache into data passed from getStaticProps/getServerSideProps\r\n        const data = merge(initialState, existingCache, {\r\n            // combine arrays using object equality (like in sets)\r\n            arrayMerge: (destinationArray, sourceArray) => [\r\n                ...sourceArray,\r\n                ...destinationArray.filter((d) =>\r\n                    sourceArray.every((s) => !isEqual(d, s))\r\n                ),\r\n            ],\r\n        })\r\n\r\n        // Restore the cache with the merged data\r\n        _apolloClient.cache.restore(data)\r\n    }\r\n    // For SSG and SSR always create a new Apollo Client\r\n    if (typeof window === 'undefined') return _apolloClient\r\n    // Create the Apollo Client once in the client\r\n    if (!apolloClient) apolloClient = _apolloClient\r\n\r\n    return _apolloClient\r\n}\r\n\r\nexport function addApolloState(client, pageProps) {\r\n    if (pageProps?.props) {\r\n        pageProps.props[APOLLO_STATE_PROP_NAME] = client.cache.extract()\r\n    }\r\n\r\n    return pageProps\r\n}\r\n\r\nexport function useApollo(pageProps) {\r\n    const state = pageProps[APOLLO_STATE_PROP_NAME]\r\n    const store = useMemo(() => initializeApollo(state), [state])\r\n    return store\r\n}\r\n"]},"metadata":{},"sourceType":"module"}